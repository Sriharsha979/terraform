provider "aws" {
  region = "us-west-2"
}

locals {
  cluster_name = "my-eks-cluster"
}

resource "aws_eks_cluster" "cluster" {
  name     = local.cluster_name
  role_arn = aws_iam_role.eks_cluster.arn

  vpc_config {
    subnet_ids = aws_subnet.private.*.id
  }

  depends_on = [
    aws_iam_role_policy_attachment.eks_cluster,
    aws_iam_role_policy_attachment.eks_node_group,
    aws_iam_instance_profile.eks_node_group,
  ]
}

resource "aws_iam_role" "eks_cluster" {
  name = "eks-cluster"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "eks.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "eks_cluster" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = aws_iam_role.eks_cluster.name
}

resource "aws_iam_role_policy_attachment" "eks_node_group" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
  role       = aws_iam_instance_profile.eks_node_group.name
}

resource "aws_iam_instance_profile" "eks_node_group" {
  name = "eks-node-group"

  role = aws_iam_role.eks_cluster.name
}

resource "aws_security_group" "eks_cluster" {
  name_prefix = "eks-cluster-"

  ingress {
    from_port = 0
    to_port   = 65535
    protocol  = "tcp"
    cidr_blocks = [
      "0.0.0.0/0",
    ]
  }
}

resource "aws_security_group_rule" "eks_cluster_ingress" {
  type        = "ingress"
  from_port   = 0
  to_port     = 65535
  protocol    = "tcp"
  cidr_blocks = [
    "0.0.0.0/0",
  ]

  security_group_id = aws_security_group.eks_cluster.id
}

data "aws_ami" "eks_worker" {
  most_recent = true

  filter {
    name   = "name"
    values = ["eks-worker-*"]
  }

  filter {
    name   = "owner-id"
    values = ["602401143452"] # Amazon EKS AMI Account ID
  }
}

resource "aws_launch_configuration" "eks_node_group" {
  name_prefix = "eks-node-group-"
  image_id    = data.aws_ami.eks_worker.id
  instance_type = "t2.small"
  security_groups = [aws_security_group.eks_cluster.id]
  associate_public_ip_address = true
}

resource "aws_autoscaling_group" "eks_node_group" {
  name_prefix = "eks-node-group-"
  launch_configuration = aws_launch_configuration.eks_node_group.name
  min_size = 1
  max_size = 5
  desired_capacity = 1

  tag {
    key = "Name"
    value = "eks-node-group"
    propagate_at_launch = true
  }
}

output "kubeconfig" {
  value = aws_eks_cluster.cluster.kubeconfig_filename
}
